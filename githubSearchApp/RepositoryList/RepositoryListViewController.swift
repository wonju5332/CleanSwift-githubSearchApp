//
//  RepositoryListViewController.swift
//  githubSearchApp
//
//  Created by wjLee-PC on 2021/01/26.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RepositoryListDisplayLogic: class
{
  func displaySomething(viewModel: RepositoryList.Fetch.ViewModel)
}

class RepositoryListViewController: UIViewController, RepositoryListDisplayLogic, UISearchBarDelegate
{
    
  var interactor: RepositoryListBusinessLogic?
  var router: (NSObjectProtocol & RepositoryListRoutingLogic & RepositoryListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = RepositoryListInteractor()
    let presenter = RepositoryListPresenter()
    let router = RepositoryListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
//    fetchData()
    searchbarTextfield.delegate = self
    tableView.delegate = self
    title = "Search"
    
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    var viewModel:RepositoryList.Fetch.ViewModel? {
        didSet {
            
            tableView.reloadData()
        }
    }
    
  func fetchData(q:String)
  {
    let request = RepositoryList.Fetch.Request(query:q)
    interactor?.fetchRepositoryies(request: request)
  }
  
  func displaySomething(viewModel: RepositoryList.Fetch.ViewModel)
  {
    
    DispatchQueue.main.async { [weak self] in
        self?.viewModel = viewModel
    }
    
  }
    
    // MARK: Search Field
    @IBOutlet weak var searchbarTextfield: UISearchBar!

    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        fetchData(q: searchText)
    }
    
    
    // MARK: UITableView
    @IBOutlet weak var tableView: UITableView!
    

    
    
}

extension RepositoryListViewController:UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "RepositoryCell") as! RepositoryCell
        cell.nameLabel.text = viewModel?.displayedRepository[indexPath.row].fullName
        cell.descriptionLabel.text = viewModel?.displayedRepository[indexPath.row].description
        cell.starCountLabel.text = String(viewModel?.displayedRepository[indexPath.row].stargazersCount ?? 0)
        return cell
        
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel?.displayedRepository.count ?? 3
    }
}
